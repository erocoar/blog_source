size = as.vector(jlines[, 61:90]),
fill = as.vector(jlines[, 61:90])),
stroke = 0, pch = 21, alpha = point_alpha) +
scale_size_continuous(range = c(1, 3)) +
scale_fill_continuous(low = "#72401c", high = "#f5f7e8") +
# repeat and jitter for glow effect
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 3, alpha = 0.3, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 3, alpha = 0.35, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 2, alpha = 0.2, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 2, alpha = 0.2, shape = 16) +
scale_color_manual(values = c("#e25c41", "#7f5de7", "#891019", "#efa483", "#f44e37", "#e6b700"))
}
v <- vector("list", 4)
jit <- seq(0, 5, length.out = 4)
for (i in 1:4)
v[[i]] <- firework(status = jit[i])
do.call("grid.arrange", c(v, nrow = 2))
print(firework(status=0))
firework <- function(status = 0.1, rad = 5,
inner_glow_jitter = 0.05,
outer_glow_jitter = 0.02,
point_alpha = 1,
jlines = NA,
glow_inner = NA,
glow_outer = NA,
col_inner = NA,
col_outer = NA) {
rad_outer <- get_circumference_matrix(0, 0, rad)
rad_inner <- get_circumference_matrix(0, 0, rad/2)
if (is.na(jlines)) jlines <- jitter(
dense_line_to_point(0, 0, rad_outer[, 1], rad_outer[, 2]), amount = status)
if (is.na(glow_inner)) glow_inner <- jitter(rad_inner, amount = inner_glow_jitter)
if (is.na(glow_outer)) glow_outer <- jitter(rad_outer, amount = outer_glow_jitter)
if (is.na(col_inner)) col_inner <- factor(sample(1:6, 30, replace = TRUE))
if (is.na(col_outer)) col_outer  <- factor(sample(1:6, 30, replace = TRUE))
inner_glow_jitter <- inner_glow_jitter / 5
outer_glow_jitter <- outer_glow_jitter / 5
pfw <- ggplot() +
coord_fixed() +
theme(legend.position = "none") +
theme(panel.border = element_blank()) +
theme(line = element_blank()) +
theme(text = element_blank()) +
theme(title = element_blank()) +
theme(panel.background = element_rect(fill = "black")) +
theme(panel.grid = element_blank()) +
xlim(-5, 5) + ylim(-5, 5) +
geom_point(aes(as.vector(jlines[, 1:30]),
as.vector(jlines[, 31:60]),
size = as.vector(jlines[, 61:90]),
fill = as.vector(jlines[, 61:90])),
stroke = 0, pch = 21, alpha = point_alpha) +
scale_size_continuous(range = c(1, 3)) +
scale_fill_continuous(low = "#72401c", high = "#f5f7e8") +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 3, alpha = 0.3, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 3, alpha = 0.35, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 2, alpha = 0.2, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 2, alpha = 0.2, shape = 16) +
scale_color_manual(values = c("#e25c41", "#7f5de7", "#891019", "#efa483", "#f44e37", "#e6b700"))
}
firework()
print(firework)
print(firework(status=0))
a = firework()
a
jitter(5)
jitter(5, amount=0)
library(ggplot2)
firework <- function(status = NULL, rad = 5,
inner_glow_jitter = 0.1,
outer_glow_jitter = 0.1,
point_alpha = 1,
jlines = NA, #allow for manual matrices for later animation
glow_inner = NA,
glow_outer = NA,
col_inner = NA,
col_outer = NA) {
rad_outer <- get_circumference_matrix(0, 0, rad)   #points on outer firework radius
rad_inner <- get_circumference_matrix(0, 0, rad/2) #points on half radius
#lines connecting center + points on circle
if (is.na(jlines)) jlines <- jitter(
dense_line_to_point(0, 0, rad_outer[, 1], rad_outer[, 2]), amount = status)
if (is.na(glow_inner)) glow_inner <- jitter(rad_inner, amount = inner_glow_jitter)
if (is.na(glow_outer)) glow_outer <- jitter(rad_outer, amount = outer_glow_jitter)
#rnd firework colors for the outer, "glowing" points
if (is.na(col_inner)) col_inner <- factor(sample(1:6, 30, replace = TRUE))
if (is.na(col_outer)) col_outer  <- factor(sample(1:6, 30, replace = TRUE))
inner_glow_jitter <- inner_glow_jitter / 5
outer_glow_jitter <- outer_glow_jitter / 5
pfw <- ggplot() +
coord_fixed() +
theme(legend.position = "none") +
theme(panel.border = element_blank()) +
theme(line = element_blank()) +
theme(text = element_blank()) +
theme(title = element_blank()) +
theme(panel.background = element_rect(fill = "black")) +
theme(panel.grid = element_blank()) +
xlim(-5, 5) + ylim(-5, 5) +
geom_point(aes(as.vector(jlines[, 1:30]),
as.vector(jlines[, 31:60]),
size = as.vector(jlines[, 61:90]),
fill = as.vector(jlines[, 61:90])),
stroke = 0, pch = 21, alpha = point_alpha) +
scale_size_continuous(range = c(1, 3)) +
scale_fill_continuous(low = "#72401c", high = "#f5f7e8") +
# repeat and jitter for glow effect
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 3, alpha = 0.3, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 3, alpha = 0.35, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 2, alpha = 0.2, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 2, alpha = 0.2, shape = 16) +
scale_color_manual(values = c("#e25c41", "#7f5de7", "#891019", "#efa483", "#f44e37", "#e6b700"))
}
vec_seq <- Vectorize(seq.default, vectorize.args = "to")
dense_line_to_point <- function(cx, cy, x, y) {
nx <- vec_seq(cx, x, length.out = 45)
ny <- vec_seq(cy, y, length.out = 45)
size <- nx^2+ny^2
return(cbind(nx, ny, size))
}
get_circumference_matrix <- function(cx, yx, r, random = TRUE) {
n <- if (random) 55 else 30
angles <- sample(seq(0, 0.99, length.out = n), 30,
replace = FALSE) * pi * 2
matrix(c(cos(angles) * r, sin(angles) * r), ncol = 2)
}
library(ggplot2)
firework <- function(status = NULL, rad = 5,
inner_glow_jitter = 0.1,
outer_glow_jitter = 0.1,
point_alpha = 1,
jlines = NA, #allow for manual matrices for later animation
glow_inner = NA,
glow_outer = NA,
col_inner = NA,
col_outer = NA) {
rad_outer <- get_circumference_matrix(0, 0, rad)   #points on outer firework radius
rad_inner <- get_circumference_matrix(0, 0, rad/2) #points on half radius
#lines connecting center + points on circle
if (is.na(jlines)) jlines <- jitter(
dense_line_to_point(0, 0, rad_outer[, 1], rad_outer[, 2]), amount = status)
if (is.na(glow_inner)) glow_inner <- jitter(rad_inner, amount = inner_glow_jitter)
if (is.na(glow_outer)) glow_outer <- jitter(rad_outer, amount = outer_glow_jitter)
#rnd firework colors for the outer, "glowing" points
if (is.na(col_inner)) col_inner <- factor(sample(1:6, 30, replace = TRUE))
if (is.na(col_outer)) col_outer  <- factor(sample(1:6, 30, replace = TRUE))
inner_glow_jitter <- inner_glow_jitter / 5
outer_glow_jitter <- outer_glow_jitter / 5
pfw <- ggplot() +
coord_fixed() +
theme(legend.position = "none") +
theme(panel.border = element_blank()) +
theme(line = element_blank()) +
theme(text = element_blank()) +
theme(title = element_blank()) +
theme(panel.background = element_rect(fill = "black")) +
theme(panel.grid = element_blank()) +
xlim(-5, 5) + ylim(-5, 5) +
geom_point(aes(as.vector(jlines[, 1:30]),
as.vector(jlines[, 31:60]),
size = as.vector(jlines[, 61:90]),
fill = as.vector(jlines[, 61:90])),
stroke = 0, pch = 21, alpha = point_alpha) +
scale_size_continuous(range = c(1, 3)) +
scale_fill_continuous(low = "#72401c", high = "#f5f7e8") +
# repeat and jitter for glow effect
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 3, alpha = 0.3, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_outer[, 1], amount = outer_glow_jitter),
jitter(glow_outer[, 2], amount = outer_glow_jitter),
colour = col_outer), size = 5, alpha = 0.15, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 3, alpha = 0.35, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 2, alpha = 0.2, shape = 16) +
geom_point(aes(jitter(glow_inner[, 1], amount = inner_glow_jitter),
jitter(glow_inner[, 2], amount = inner_glow_jitter),
colour = col_inner), size = 2, alpha = 0.2, shape = 16) +
scale_color_manual(values = c("#e25c41", "#7f5de7", "#891019", "#efa483", "#f44e37", "#e6b700"))
}
v <- vector("list", 4)
jit <- seq(0, 5, length.out = 4)
for (i in 1:4)
v[[i]] <- firework(status = jit[i])
do.call("grid.arrange", c(v, nrow = 2))
v <- vector("list", 4)
jit <- c(NULL, seq(0, 1, length.out = 3))
for (i in 1:4)
v[[i]] <- firework(status = jit[i])
jitter(5, amount = NULL)
jitter(5, NULL)
v <- vector("list", 4)
jit <- c(NULL, seq(0, 1, length.out = 3))
for (i in 1:4)
v[[i]] <- firework(status = jit[i])
firework(status = jit[1])
firework(status = jit[2])
firework(status = jit[3])
firework(status = jit[4])
jit[4]
jit
c(NULL, seq(0, 1, length.out = 3))
v <- vector("list", 4)
jit <- seq(0, 1, length.out = 3)
for (i in 1:4)
v[[i]] <- firework(if (i==1) status = jit[i])
do.call("grid.arrange", c(v, nrow = 2))
v <- vector("list", 4)
jit <- seq(0, 1, length.out = 3)
for (i in 1:4)
v[[i]] <- firework(if (i != 1) status = jit[i])
v <- vector("list", 4)
jit <- seq(0, 1, length.out = 3)
for (i in 1:4)
v[[i]] <- firework(if (i != 1) status = jit[i-1])
do.call("grid.arrange", c(v, nrow = 2))
v <- vector("list", 4)
jit <- seq(0, 0.4, length.out = 3)
for (i in 1:4)
v[[i]] <- firework(if (i != 1) status = jit[i-1])
do.call("grid.arrange", c(v, nrow = 2))
v <- vector("list", 4)
rckt <- order(sample(1:50, 4))
cat(rckt)
v <- vector("list", 4)
rckt <- sort(sample(1:50, 4))
cat(rckt)
v <- vector("list", 4)
rckt <- sort(sample(1:50, 4))
cat(rckt)
v <- vector("list", 4)
rckt <- sort(sample(1:50, 4))
for (i in 1:4)
v[[i]] <- draw_rocket(rocket, rocket_alpha[, i])
do.call("grid.arrange", c(v, nrow = 2))
v <- vector("list", 4)
rckt <- sort(sample(25:50, 4))
for (i in 1:4)
v[[i]] <- draw_rocket(rocket, rocket_alpha[, i])
do.call("grid.arrange", c(v, nrow = 2))
v <- vector("list", 4)
rckt <- sort(sample(1:50, 4))
for (i in 1:4)
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
v <- vector("list", 4)
rckt <- sort(sample(1:50, 4))
cat(rckt)
for (i in 1:4)
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
print(draw_rocket(rocket, rocket_alpha[, 1]))
print(draw_rocket(rocket, rocket_alpha[, 5]))
print(draw_rocket(rocket, rocket_alpha[, 15]))
print(draw_rocket(rocket, rocket_alpha[, 21]))
print(draw_rocket(rocket, rocket_alpha[, 25]))
print(draw_rocket(rocket, rocket_alpha[, 31]))
print(draw_rocket(rocket, rocket_alpha[, 41]))
v <- vector("list", 4)
rckt <- sort(sample(25:50, 4))
cat(rckt)
for (i in 1:4)
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
v <- vector("list", 4)
rckt <- sort(sample(25:50, 4))
cat(rckt)
for (i in 1:4)
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
v <- vector("list", 4)
rckt <- sort(sample(25:50, 4))
cat(rckt)
for (i in 1:4)
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
print(draw_rocket(rocket, rocket_alpha[, 26]))
print(draw_rocket(rocket, rocket_alpha[, 30]))
print(draw_rocket(rocket, rocket_alpha[, 35]))
print(draw_rocket(rocket, rocket_alpha[, 41]))
v <- vector("list", 4)
rckt <- seq(25:50, 4)
v <- vector("list", 4)
rckt <- seq(25, 50, length.out4)
v <- vector("list", 4)
rckt <- seq(25, 50, length.out = 4)
cat(rckt)
for (i in 1:4)
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
integer(0.11111111)
v <- vector("list", 4)
rckt <- integer(seq(25, 50, length.out = 4))
integer(seq(25, 50, length.out = 4))
as.integer(seq(25, 50, length.out = 4))
v <- vector("list", 4)
rckt <- as.integer(seq(25, 50, length.out = 4))
cat(rckt)
for (i in 1:4)
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
v <- vector("list", 4)
rckt <- as.integer(seq(25, 50, length.out = 4))
cat(rckt)
for (i in 1:4)
print(rckt[i])
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
v[[1]]
v[[2]]
v$1
draw_rocket(rocket, rocket_alpha[, rckt[25]])
draw_rocket(rocket, rocket_alpha[, rckt[31]])
draw_rocket(rocket, rocket_alpha[, rckt[25]])
draw_rocket(rocket, rocket_alpha[, rckt[5]])
draw_rocket(rocket, rocket_alpha[, rckt[5]])
print( draw_rocket(rocket, rocket_alpha[, rckt[i]]))
draw_rocket(rocket, rocket_alpha[, rckt[25]])
print( draw_rocket(rocket, rocket_alpha[, rckt[25]]))
#create rocket data
rocket <- cbind(-seq(4, 0, length.out = 100), (-(seq(4, 0, length.out = 100))^2))
rocket_alpha <- matrix(c(rep(1, 2), rep(0, 98)), ncol = 1)
#fill alpha matrix
for(i in 1:49) {
rocket_alpha <- cbind(rocket_alpha, lag(rocket_alpha[, i], 2, 0))
rocket_alpha[1:(2+2*i), i+1] <- seq(0.01, 0.75, length.out = (2+2*i))
rocket_alpha[(2+2*i):100, i] <- 0
}
draw_rocket <- function(rocket, rocket_alpha) {
ggplot() +
coord_fixed() +
theme(legend.position = "none") +
theme(panel.border = element_blank()) +
theme(line = element_blank()) +
theme(text = element_blank()) +
theme(title = element_blank()) +
theme(panel.background = element_rect(fill = "black")) +
theme(panel.grid = element_blank()) +
xlim(-5, 5) + ylim(-5, 5) +
geom_point(aes(rocket[, 1], rocket[, 2], alpha = rocket_alpha), colour = "gold", shape = 16, size = 2) +
scale_alpha_continuous(range = c(0, 1))
}
draw_rocket(rocket, rocket_alpha[, 25])
v <- vector("list", 4)
rckt <- as.integer(seq(25, 50, length.out = 4))
cat(rckt)
for (i in 1:4)
print(rckt[i])
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
draw_rocket(rocket, rocket_alpha[, rckt[25]])
v <- vector("list", 4)
rckt <- as.integer(seq(25, 50, length.out = 4))
cat(rckt)
for (i in 1:4)
print(rckt[i])
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
#create rocket data
rocket <- cbind(-seq(4, 0, length.out = 100), (-(seq(4, 0, length.out = 100))^2))
rocket_alpha <- matrix(c(rep(1, 2), rep(0, 98)), ncol = 1)
#fill alpha matrix
for(i in 1:49) {
rocket_alpha <- cbind(rocket_alpha, lag(rocket_alpha[, i], 2, 0))
rocket_alpha[1:(2+2*i), i+1] <- seq(0.01, 0.75, length.out = (2+2*i))
rocket_alpha[(2+2*i):100, i] <- 0
}
draw_rocket <- function(rocket, rocket_alpha) {
rckt <- ggplot() +
coord_fixed() +
theme(legend.position = "none") +
theme(panel.border = element_blank()) +
theme(line = element_blank()) +
theme(text = element_blank()) +
theme(title = element_blank()) +
theme(panel.background = element_rect(fill = "black")) +
theme(panel.grid = element_blank()) +
xlim(-5, 5) + ylim(-5, 5) +
geom_point(aes(rocket[, 1], rocket[, 2], alpha = rocket_alpha), colour = "gold", shape = 16, size = 2) +
scale_alpha_continuous(range = c(0, 1))
return(rckt)
}
v <- vector("list", 4)
rckt <- as.integer(seq(25, 50, length.out = 4))
cat(rckt)
for (i in 1:4)
print(rckt[i])
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
draw_rocket(rocket, rocket_alpha[, rckt[1]])
draw_rocket(rocket, rocket_alpha[, rckt[2]])
draw_rocket(rocket, rocket_alpha[, rckt[3]])
draw_rocket(rocket, rocket_alpha[, rckt[4]])
test <- list()
test[[1]] <- draw_rocket(rocket, rocket_alpha[, rckt[1]])
test[[2]] <- draw_rocket(rocket, rocket_alpha[, rckt[2]])
v <- list()
rckt <- as.integer(seq(25, 50, length.out = 4))
cat(rckt)
for (i in 1:4)
print(rckt[i])
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
v <- list()
rckt <- as.integer(seq(25, 50, length.out = 4))
cat(rckt)
for (i in 1:4)
v[[i]] <- draw_rocket(rocket, rocket_alpha[, rckt[i]])
do.call("grid.arrange", c(v, nrow = 2))
rocket_alpha[, rckt[1]]
rocket_alpha[, rckt[2]]
rocket_alpha[, rckt[3]]
rocket_alpha[, rckt[4]]
v <- list()
rckt <- as.integer(seq(25, 50, length.out = 4))
cat(rckt)
for (i in 1:4)
v[[i]] <- draw_rocket(rocket, as.vector(rocket_alpha[, rckt[i]]))
do.call("grid.arrange", c(v, nrow = 2))
v <- list()
rckt <- as.integer(seq(25, 50, length.out = 4))
cat(rckt)
for (i in 1:4)
alpha <- rocket_alpha[, rckt[i]]
v[[i]] <- draw_rocket(rocket, alpha)
do.call("grid.arrange", c(v, nrow = 2))
v <- list()
rckt <- as.integer(seq(25, 50, length.out = 4))
cat(rckt)
for (i in 1:2)
alpha <- rocket_alpha[, rckt[i]]
v[[i]] <- draw_rocket(rocket, alpha)
do.call("grid.arrange", c(v, nrow = 2))
v <- list()
rckt <- floor(seq(25, 50, length.out = 4))
cat(rckt)
for (i in 1:2)
alpha <- rocket_alpha[, rckt[i]]
v[[i]] <- draw_rocket(rocket, alpha)
do.call("grid.arrange", c(v, nrow = 2))
