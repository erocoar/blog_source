n = length(Cigar$state)
param = 4 #nr of our regression parameters
#Lecture Notes: Panel Data Fixed Effects
require(plm)
require(foreign)
require(car)
require(data.table)
require(lmtest)
data("Cigar", package = "plm")
Cigar["o16perc"] <- Cigar$pop16 / Cigar$pop
Cigar["state"]   <- as.factor(Cigar$state)
n = length(Cigar$state)
param = 4 #nr of our regression parameters
df <- ((length(unique(Cigar$state)) * o) - length(coef(f5)[2:5]) - length(unique(Cigar$state)))
o = 30 #where o = number of observations for STATE_i
o = 30 #where o = number of observations for STATE_i
df <- ((length(unique(Cigar$state)) * o) - length(coef(f5)[2:5]) - length(unique(Cigar$state)))
#regression:
f5 <- lm(sales_mean ~ price_mean + ndi_mean + o16perc_mean + cpi_mean, data = Cigar)
x <- as.matrix(cbind(1, Cigar$price_mean, Cigar$ndi_mean, Cigar$o16perc_mean, Cigar$cpi_mean))
y <- as.matrix(Cigar$sales_mean)
y <- as.matrix(Cigar$sales_mean)
View(Cigar)
set.seed(160945)
m0 <- 3; lam0 <- 1 # true values
x <- rgamma(100, m0, lam0) # data
my_dgamma <- function(a, s){
return((s^a*x^(a-1)*exp(-(x/s)))/factorial(a-1))
}
my_dgamma <- function(x, a, s){
return((s^a*x^(a-1)*exp(-(x/s)))/factorial(a-1))
}
dgamma(1, 2, 3)
my_dgamma(1, 2, 3)
my_dgamma <- function(x, a, s){
return(((s^a)*x^(a-1)*exp(-(x/s)))/factorial(a-1))
}
dgamma(1, 2, 3)
my_dgamma(1, 2, 3)
my_dgamma <- function(x, a, s){
return(((s^a)*(x^(a-1))*(exp(-(x/s))))/factorial(a-1))
}
dgamma(1, 2, 3)
my_dgamma(1, 2, 3)
my_dgamma <- function(x, s, a){
return(((s^a)*(x^(a-1))*(exp(-(x/s))))/factorial(a-1))
}
dgamma(1, 2, 3)
my_dgamma(1, 2, 3)
exp(2)
my_dgamma <- function(x, a, s){
return(((s^a)*(x^(a-1))*(exp(-(x/s))))/factorial(a-1))
}
dgamma(1, 2, 3)
my_dgamma(1, 2, 3)
my_dgamma <- function(x, a, s){
return(((s^a)*(x^(a-1))*(exp(-(xs))))/factorial(a-1))
}
dgamma(1, 2, 3)
my_dgamma(1, 2, 3)
my_dgamma <- function(x, a, s){
return(((s^a)*(x^(a-1))*(exp(-(x*s))))/factorial(a-1))
}
dgamma(1, 2, 3)
my_dgamma(1, 2, 3)
dgamma(1, 2, 3)
my_dgamma(1, 2, 3)
lamhat <- mean(x)/var(x)
mhat <- mean(x)*lamhat
c(shape = mhat, rate = lamhat)
B <- 1e3; t_pboots <- rep(NA, B)
for (b in 1:B) {
xstar <- rgamma(100, mhat, lamhat)
t_pboots[b] <- median(xstar)
}
sd(t_pboots)
sd(rgamma)
sd(x)
t_pmonte
t_pmonte <- rep(NA, B)
t_pmonte <- rep(NA, B)
for (b in 1:B){
xstar <- rgamma(100, m0, lam0)
t_pmonte[b] <- median(xstar)
}
c(sd(t_pboots), sd(t_pmonte))
hist(t_pmonte)
abline(x=median(x))
abline(median(x))
abline(v=median(x))
abline(v=median(x), lwd=3, c='red')
abline(v=median(x), col='red')
abline(v=median(x), col='red', lwd=2)
abline(v=median(x), col='red', lwd=3)
hist(t_pboots)
hist(t_pboots, breaks=20)
abline(v=median(x), col='red', lwd=3)
hist(t_pmonte)
abline(v=median(x), col='red', lwd=3)
lb_norm <- median(x) - qnorm(0.975)*sd(t_pboots)
ub_norm <- median(x) + qnorm(0.975)*sd(t_pboots)
c(lb_norm, ub_norm)
lb_perc <- median(x) - (quantile(t_pboots, 0.975) - mean(t_pboots))
ub_perc <- median(x) - (quantile(t_pboots, 0.025) - mean(t_pboots))
c(lb_perc, ub_perc)
c(lb_norm, ub_norm)
test <- c(1, 2, 3, 4)
quantile(test, 0.5)
quantile(test, 0.975)
Advertising <- read.csv("C:/Users/Frederik/Downloads/Advertising.csv")
View(Advertising)
Advertising <- read.csv("C:/Users/Frederik/Downloads/Advertising.csv")
X <- cbind(1, Advertising$TV, Advertising$radio, Advertising$newspaper)
View(Advertising)
View(X)
Y <- Advertising$sales
Y <- matrix(Advertising$sales, ncol=ncol(Advertising$sales))
Y <- matrix(Advertising$sales, ncol=length(Advertising$sales))
View(Y)
Y <- matrix(Advertising$sales, nrow=length(Advertising$sales))
X %*% solve(t(X) %*% X) %*% t(x) %*% Y
X %*% solve(t(X) %*% X) %*% t(X) %*% Y
Y_hat <- X %*% solve(t(X) %*% X) %*% t(X) %*% Y
beta  <- solve(t(X) %*% X) %*% t(X) %*% Y
beta
y_hat <- X %*% beta
Y_hat <- X %*% solve(t(X) %*% X) %*% t(X) %*% Y
test <- X %*% beta
all.equal(Y_hat, test)
resid <- Y - Y_hat
var_est <- (resid %*% t(resid))/(nrow(Advertising)-4)
var_est
var_est[1,1] * solve(t(x) %*% x)
var_est <- (t(resid) %*% resid)/(nrow(Advertising)-4)
var_est[1,1] * solve(t(x) %*% x)
var_est[1,1] * solve(t(X) %*% X)
vcov_mat <- var_est[1,1] * solve(t(X) %*% X)
sds <- sqrt(diag(vcov_mat))
sds
library(lmtest)
lm(sales~TV+radio+newspaper, data=Advertising)
f1 <- lm(sales~TV+radio+newspaper, data=Advertising)
summary(f1)
sds
beta
beta[1,1]
beta[1,1]/sds[1]
t1 <- beta[1,1]/sds[1]
qt(t1)
qt(t1, df=197)
pt(t1, df=197)
summary(f1)
t1 <- beta[1,1]/sds[1]
t1
sds[,1]
sds[1,]
sds[1,:]
sds[1,1:4]
sds[1,1:3]
sds
beta[1:4,]
beta[1:4,]/sds
summary(f1)
beta[1:4,]/sds
t_values <- beta[1:4,]/sds
p_values <- pt(t_values, 197)
p_values
f1 <- lm(sales~TV+radio+newspaper, data=Advertising)
f1
summary(f1)
pt(-0.177, 197)
qt(-0.177, 197)
dt(-0.177, 197)
summary(f1)
dt(-0.177, 197)
summary(f1)
dt(-0.177, 195)
pt(-0.177, 195)
2*pt(abs(-0.177, 195))
2*pt(abs(-0.177), 195)
2*pt(abs(-0.177), 195, lower.tail = F)
summary(f1)
2*pt(abs(-0.177), 195, lower.tail = F)
f1 <- lm(sales~TV+radio+newspaper, data=Advertising)
summary(f1)
2*pt(abs(-0.177), 195, lower.tail = F)
2*pt(abs(-t_values), 195, lower.tail = F)
summary(f1)
2*pt(abs(-t_values), 195, lower.tail = F)
beta
beta[1, 2]
beta[2.1]
summary(f1)
beta
resid
salesremain = Advertising$sales - (beta[2, 1] + beta[3, 1] + resid)
salesremain
B <- 1000
winequality.red <- read.csv("C:/Users/Frederik/Downloads/winequality-red.csv")
View(winequality.red)
winequality.red <- read.csv("C:/Users/Frederik/Downloads/winequality-red.csv")
lm(quality~., data=winequality.red)
m <- lm(quality~., data=winequality.red)
summary(m)
install.packages("ggcorr")
install.packages("GGally")
library(GGally)
ggcorr(winequality.red)
plot(m)
hist(winequality.red$quality)
hist(winequality.red$quality, breaks=20)
hist(winequality.red$quality, breaks=20, freq = TRUE)
hist(winequality.red$quality, breaks=20, freq = F)
v <- seq(3:8, 100)
v <- seq(3:8, from.length =100)
v <- seq(3,8,length.out =100)
d <- dnorm(v, mean(winequality.red$quality), sd(winequality.red$quality))
lines(v, d)
sd(winequality.red$quality)
d <- dnorm(v, mean(winequality.red$quality), 2)
lines(v, d)
d <- dnorm(v, mean(winequality.red$quality), 0.2)
lines(v, d)
d <- dnorm(v, mean(winequality.red$quality), 0.5)
lines(v, d)
d <- dnorm(v, mean(winequality.red$quality), 0.3)
lines(v, d)
d <- dnorm(v, mean(winequality.red$quality), 0.25)
lines(v, d)
hist(winequality.red$quality, breaks=20, freq = F)
v <- seq(3,8,length.out =100)
d <- dnorm(v, mean(winequality.red$quality), 0.25)
lines(v, d)
mean(winequality.red$quality)
d
hist(winequality.red$quality, breaks=10, freq = F)
v <- seq(3,8,length.out =100)
d <- dnorm(v, mean(winequality.red$quality), 0.25)
lines(v, d)
d <- dnorm(v, mean(winequality.red$quality), sd(winequality.red$quality))
lines(v, d)
hist(winequality.red$quality, breaks=10, freq = F)
v <- seq(3,8,length.out =100)
d <- dnorm(v, mean(winequality.red$quality), sd(winequality.red$quality))
lines(v, d)
hist(winequality.red$quality, breaks=5, freq = F)
v <- seq(3,8,length.out =100)
d <- dnorm(v, mean(winequality.red$quality), sd(winequality.red$quality))
lines(v, d)
hist(winequality.red$quality, breaks=5, freq = F, ylim=c(0, 1))
v <- seq(3,8,length.out =100)
d <- dnorm(v, mean(winequality.red$quality), sd(winequality.red$quality))
lines(v, d)
hist(winequality.red$quality, breaks=5, freq = F, ylim=c(0, 0.6))
v <- seq(3,8,length.out =100)
d <- dnorm(v, mean(winequality.red$quality), sd(winequality.red$quality))
lines(v, d)
a = "Test"
a = "Test"
switch(a, "Test" = 17,
"Test2" = 20)
cormat <- ggcorr(winequality.red, geom = "blank", label = TRUE, hjust = 0.75) +
geom_point(size = 10, aes(color = coefficient > 0, alpha = abs(coefficient) >= 0.4)) +
scale_alpha_manual(values = c("TRUE" = 0.4, "FALSE" = 0)) + theme(legend.position = "none")
cormat
# Data
library(tidyverse)
library(GGally)
library(ggthemes)
library(MASS)
library(gridExtra)
library(reshape2)
winequality.red <- read.csv("D:/OneDrive/_Msc_/Semester 1/Linear Models/winequality-red.csv")
library(stargazer)
cormat <- ggcorr(winequality.red, geom = "blank", label = TRUE, hjust = 0.75) +
geom_point(size = 10, aes(color = coefficient > 0, alpha = abs(coefficient) >= 0.4)) +
scale_alpha_manual(values = c("TRUE" = 0.4, "FALSE" = 0)) + theme(legend.position = "none")
cormat
install.packages(c("blogdown", "rms", "effects"))
library(blogdown)
install_hugo()
setwd(D:/Onedrive/github/blog_source)
setwd("D:/Onedrive/github/blog_source")
new_post("Ordinal Logistic Regression With ggplot2")
library(haven)
Pew_Research_Center_Spring_2016_Global_Attitudes_Dataset_WEB_FINAL <- read_sav("C:/Users/Frederik/Downloads/Pew-Research-Center-Spring-2016-Global-Attitudes-Dataset-WEB-FINAL/Pew Research Center Spring 2016 Global Attitudes Dataset WEB FINAL.sav")
View(Pew_Research_Center_Spring_2016_Global_Attitudes_Dataset_WEB_FINAL)
Pew <- Pew_Research_Center_Spring_2016_Global_Attitudes_Dataset_WEB_FINAL
rm(Pew_Research_Center_Spring_2016_Global_Attitudes_Dataset_WEB_FINAL)
Pew <- Pew[, c("Q1" ,"Q10B")]
Pew <- Pew[, c("q1" ,"Q10B")]
Pew <- read_sav("C:/Users/Frederik/Downloads/Pew-Research-Center-Spring-2016-Global-Attitudes-Dataset-WEB-FINAL/Pew Research Center Spring 2016 Global Attitudes Dataset WEB FINAL.sav")
Pew <- Pew[, c("ID", "country", "survey", "q1" ,"Q10B")]
head(Pew$country)
Pew <- Pew[Pew$country == "19", ]
View(Pew)
plot(Pew$q1)
barplot(Pew$q1)
plot(Pew$Q10B)
barplot(Pew$Q10B)
barplot(Pew$Q10B, Pew$q1)
summary(Pew$q1)
summary(Pew$Q10B)
Pew$Q10B
1 %in% c(1,2)
1 !%in% c(1,2)
!1 %in% c(1,2)
Pew$Q10B
Pew <- Pew[!Pew$q1 %in% c(8, 9) & !Pew$Q10B %in% c(8, 9)]
Pew <- Pew[!Pew$q1 %in% c(8, 9) & !Pew$Q10B %in% c(8, 9), ]
Pew$Q10B
labels(Pew)
labels(Pew$Q10B)
levels(Pew$Q10B)
Pew$Q10B
library(MASS)
library(ggplot2)
library(rms)
plot.xmean.ordinaly(Q10B~q1, data = Pew)
Pew$q1
p <- aggregate(Pew$Q10B, by = list(Pew$q1), FUN = mean)
p
plot(p)
# first ordinality check + propodds check can be done using rms package plot.xmean.ordinaly
# plotting means per factor & means*prob*... from univariate ordinal logit
plot.xmean.ordinaly(Q10B~q1, data = Pew)
lines(p)
lines(p, col="red")
lines(p, col="green")
plot(p)
lines(p, col="green")
# first ordinality check + propodds check can be done using rms package plot.xmean.ordinaly
# plotting means per factor & means*prob*... from univariate ordinal logit
plot.xmean.ordinaly(Q10B~q1, data = Pew)
p <- aggregate(Pew$q1, by = list(Pew$Q10B), FUN = mean)
lines(p, col="green")
points(p, col="red")
points(p, col="red", hex=3)
points(p, col="red")
lines(p, col="green")
points(p, col="red")
p <- aggregate(Pew$q1, by = list(Pew$Q10B), FUN = mean)
# first ordinality check + propodds check can be done using rms package plot.xmean.ordinaly
# plotting means per factor & means*prob*... from univariate ordinal logit
plot.xmean.ordinaly(Q10B~q1, data = Pew)
p <- aggregate(Pew$q1, by = list(Pew$Q10B), FUN = mean)
lines(p, col="green")
points(p, col="red")
# first ordinality check + propodds check can be done using rms package plot.xmean.ordinaly
# plotting means per factor & means*prob*... from univariate ordinal logit
plot.xmean.ordinaly(Q10B~q1, data = Pew)
p <- aggregate(Pew$q1, by = list(Pew$Q10B), FUN = mean)
lines(p, col="green")
points(p, col="red")
p <- aggregate(Pew$q1, by = list(Pew$Q10B), FUN = mean)
lines(p, col="green")
points(p, col="red")
# fit univariate logistic model
umod <- polr(Pew$Q10B~Pew$q1)
# fit univariate logistic model
umod <- polr(factor(Pew$Q10B)~(Pew$q1))
umod
library(brant)
install.packages("brant")
brant(umod)
library(brant)
brant(umod)
# fit univariate logistic model
umod <- polr(factor(Q10B)~factor(q1), data = Pew)
umod
summary(umod)
pt(1.797)
pt(1.797, 1550)
pnorm(1.96)
1-pnorm(1.96)
# cumulative logits
cofs <- umod$coefficients
alpha <- umod$zeta
logit1 <- alpha[1] - cofs*Pew$q1
alpha
logit2 <- alpha[2] - cofs*Pew$q1
logit3 <- alpha[3] - cofs*Pew$q1
#cumulative probabilities
pL1 <- 1/(1+exp(-logit1))
pL2 <- 1/(1+exp(-logit2))
pL3 <- 1/(1+exp(-logit3))
pL4 <- 1/(1+exp(-logit4))
test <- c(pL1, pL2, pL3)
lines(test)
lines(test, col = "red")
plot(test)
test <- c(mean(pL1), mean(pL2), mean(pL3))
lines(test, col = "red")
plot(test)
# first ordinality check + propodds check can be done using rms package plot.xmean.ordinaly
# plotting means per factor & means*prob*... from univariate ordinal logit
plot.xmean.ordinaly(Q10B~q1, data = Pew)
Pew$q1
Pew$Q10B
sum((Pew$Q10B*pL1)/length(Pew$q1[Pew$Q10B==2]))
